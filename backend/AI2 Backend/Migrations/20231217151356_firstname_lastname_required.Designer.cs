// <auto-generated />
using System;
using AI2_Backend.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AI2_Backend.Migrations
{
    [DbContext(typeof(AIDbContext))]
    [Migration("20231217151356_firstname_lastname_required")]
    partial class firstname_lastname_required
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AI2_Backend.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("text");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("AI2_Backend.Entities.InvitationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfSending")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("text");

                    b.Property<int>("RecruiterId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("InvitationHistories");
                });

            modelBuilder.Entity("AI2_Backend.Entities.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("AI2_Backend.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AI2_Backend.Entities.SavedProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("RecruiterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("SavedProfiles");
                });

            modelBuilder.Entity("AI2_Backend.Entities.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CounterDaily")
                        .HasColumnType("int");

                    b.Property<int>("CounterMonthly")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("AI2_Backend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AboutMe")
                        .HasMaxLength(10000)
                        .HasColumnType("text");

                    b.Property<string>("Education")
                        .HasMaxLength(10000)
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("RequiredPayment")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("Voivodeship")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AI2_Backend.Entities.UserExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("UserExperiences");
                });

            modelBuilder.Entity("AI2_Backend.Entities.UserPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisibleAboutMe")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisibleEducation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisibleExperience")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisibleProfile")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisibleRequiredPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisibleSkills")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisibleVoivodeship")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("AI2_Backend.Entities.UserQualification", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("QualificationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "QualificationId");

                    b.HasIndex("QualificationId");

                    b.ToTable("UserQualifications");
                });

            modelBuilder.Entity("AI2_Backend.Entities.InvitationHistory", b =>
                {
                    b.HasOne("AI2_Backend.Entities.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI2_Backend.Entities.User", "Recruiter")
                        .WithMany("InvitationsHistory")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("AI2_Backend.Entities.SavedProfile", b =>
                {
                    b.HasOne("AI2_Backend.Entities.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI2_Backend.Entities.User", "Recruiter")
                        .WithMany("SavedProfiles")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("AI2_Backend.Entities.Stats", b =>
                {
                    b.HasOne("AI2_Backend.Entities.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AI2_Backend.Entities.User", b =>
                {
                    b.HasOne("AI2_Backend.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AI2_Backend.Entities.UserExperience", b =>
                {
                    b.HasOne("AI2_Backend.Entities.User", "Employee")
                        .WithMany("UserExperiences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI2_Backend.Entities.Experience", "Experience")
                        .WithMany("UserExperiences")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("AI2_Backend.Entities.UserPreferences", b =>
                {
                    b.HasOne("AI2_Backend.Entities.User", "Employee")
                        .WithOne("UserPreferences")
                        .HasForeignKey("AI2_Backend.Entities.UserPreferences", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AI2_Backend.Entities.UserQualification", b =>
                {
                    b.HasOne("AI2_Backend.Entities.Qualification", "Qualification")
                        .WithMany("UserQualifications")
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI2_Backend.Entities.User", "User")
                        .WithMany("UserQualifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Qualification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI2_Backend.Entities.Experience", b =>
                {
                    b.Navigation("UserExperiences");
                });

            modelBuilder.Entity("AI2_Backend.Entities.Qualification", b =>
                {
                    b.Navigation("UserQualifications");
                });

            modelBuilder.Entity("AI2_Backend.Entities.User", b =>
                {
                    b.Navigation("InvitationsHistory");

                    b.Navigation("SavedProfiles");

                    b.Navigation("UserExperiences");

                    b.Navigation("UserPreferences");

                    b.Navigation("UserQualifications");
                });
#pragma warning restore 612, 618
        }
    }
}
